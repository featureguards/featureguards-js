// @generated by protobuf-ts 2.6.0 with parameter optimize_code_size
// @generated from protobuf file "toggles/toggles.proto" (package "toggles", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { MessageType } from "@protobuf-ts/runtime";
import { FeatureToggle } from "../shared/feature_toggle";
import { Platform_Type } from "../shared/feature_toggle";
/**
 * @generated from protobuf message toggles.FetchRequest
 */
export interface FetchRequest {
    /**
     * @generated from protobuf field: feature_toggle.Platform.Type platform = 1;
     */
    platform: Platform_Type;
    /**
     * @generated from protobuf field: int64 version = 2;
     */
    version: bigint;
}
/**
 * @generated from protobuf message toggles.FetchResponse
 */
export interface FetchResponse {
    /**
     * @generated from protobuf field: repeated feature_toggle.FeatureToggle feature_toggles = 1;
     */
    featureToggles: FeatureToggle[];
    /**
     * @generated from protobuf field: int64 version = 2;
     */
    version: bigint;
}
/**
 * @generated from protobuf message toggles.ListenRequest
 */
export interface ListenRequest {
    /**
     * @generated from protobuf field: feature_toggle.Platform.Type platform = 1;
     */
    platform: Platform_Type;
    /**
     * @generated from protobuf field: int64 version = 2;
     */
    version: bigint;
}
/**
 * @generated from protobuf message toggles.ListenPayload
 */
export interface ListenPayload {
    /**
     * @generated from protobuf field: repeated feature_toggle.FeatureToggle feature_toggles = 1;
     */
    featureToggles: FeatureToggle[];
    /**
     * @generated from protobuf field: int64 version = 2;
     */
    version: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class FetchRequest$Type extends MessageType<FetchRequest> {
    constructor() {
        super("toggles.FetchRequest", [
            { no: 1, name: "platform", kind: "enum", T: () => ["feature_toggle.Platform.Type", Platform_Type] },
            { no: 2, name: "version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message toggles.FetchRequest
 */
export const FetchRequest = new FetchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FetchResponse$Type extends MessageType<FetchResponse> {
    constructor() {
        super("toggles.FetchResponse", [
            { no: 1, name: "feature_toggles", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FeatureToggle },
            { no: 2, name: "version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message toggles.FetchResponse
 */
export const FetchResponse = new FetchResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListenRequest$Type extends MessageType<ListenRequest> {
    constructor() {
        super("toggles.ListenRequest", [
            { no: 1, name: "platform", kind: "enum", T: () => ["feature_toggle.Platform.Type", Platform_Type] },
            { no: 2, name: "version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message toggles.ListenRequest
 */
export const ListenRequest = new ListenRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListenPayload$Type extends MessageType<ListenPayload> {
    constructor() {
        super("toggles.ListenPayload", [
            { no: 1, name: "feature_toggles", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FeatureToggle },
            { no: 2, name: "version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message toggles.ListenPayload
 */
export const ListenPayload = new ListenPayload$Type();
/**
 * @generated ServiceType for protobuf service toggles.Toggles
 */
export const Toggles = new ServiceType("toggles.Toggles", [
    { name: "Fetch", options: {}, I: FetchRequest, O: FetchResponse },
    { name: "Listen", serverStreaming: true, options: {}, I: ListenRequest, O: ListenPayload }
]);
