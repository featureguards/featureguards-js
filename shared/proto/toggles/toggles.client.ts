// @generated by protobuf-ts 2.6.0 with parameter optimize_code_size
// @generated from protobuf file "toggles/toggles.proto" (package "toggles", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Toggles } from "./toggles";
import type { ListenPayload } from "./toggles";
import type { ListenRequest } from "./toggles";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { FetchResponse } from "./toggles";
import type { FetchRequest } from "./toggles";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service toggles.Toggles
 */
export interface ITogglesClient {
    /**
     * @generated from protobuf rpc: Fetch(toggles.FetchRequest) returns (toggles.FetchResponse);
     */
    fetch(input: FetchRequest, options?: RpcOptions): UnaryCall<FetchRequest, FetchResponse>;
    /**
     * @generated from protobuf rpc: Listen(toggles.ListenRequest) returns (stream toggles.ListenPayload);
     */
    listen(input: ListenRequest, options?: RpcOptions): ServerStreamingCall<ListenRequest, ListenPayload>;
}
/**
 * @generated from protobuf service toggles.Toggles
 */
export class TogglesClient implements ITogglesClient, ServiceInfo {
    typeName = Toggles.typeName;
    methods = Toggles.methods;
    options = Toggles.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Fetch(toggles.FetchRequest) returns (toggles.FetchResponse);
     */
    fetch(input: FetchRequest, options?: RpcOptions): UnaryCall<FetchRequest, FetchResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<FetchRequest, FetchResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Listen(toggles.ListenRequest) returns (stream toggles.ListenPayload);
     */
    listen(input: ListenRequest, options?: RpcOptions): ServerStreamingCall<ListenRequest, ListenPayload> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListenRequest, ListenPayload>("serverStreaming", this._transport, method, opt, input);
    }
}
