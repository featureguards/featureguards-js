// @generated by protobuf-ts 2.6.0 with parameter optimize_code_size
// @generated from protobuf file "auth/auth.proto" (package "auth", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Auth } from "./auth";
import type { RefreshResponse } from "./auth";
import type { RefreshRequest } from "./auth";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { AuthenticateResponse } from "./auth";
import type { AuthenticateRequest } from "./auth";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service auth.Auth
 */
export interface IAuthClient {
    /**
     * Web apps should never call this directly.
     *
     * @generated from protobuf rpc: Authenticate(auth.AuthenticateRequest) returns (auth.AuthenticateResponse);
     */
    authenticate(input: AuthenticateRequest, options?: RpcOptions): UnaryCall<AuthenticateRequest, AuthenticateResponse>;
    /**
     * Refresh can be called via web too.
     *
     * @generated from protobuf rpc: Refresh(auth.RefreshRequest) returns (auth.RefreshResponse);
     */
    refresh(input: RefreshRequest, options?: RpcOptions): UnaryCall<RefreshRequest, RefreshResponse>;
}
/**
 * @generated from protobuf service auth.Auth
 */
export class AuthClient implements IAuthClient, ServiceInfo {
    typeName = Auth.typeName;
    methods = Auth.methods;
    options = Auth.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Web apps should never call this directly.
     *
     * @generated from protobuf rpc: Authenticate(auth.AuthenticateRequest) returns (auth.AuthenticateResponse);
     */
    authenticate(input: AuthenticateRequest, options?: RpcOptions): UnaryCall<AuthenticateRequest, AuthenticateResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<AuthenticateRequest, AuthenticateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Refresh can be called via web too.
     *
     * @generated from protobuf rpc: Refresh(auth.RefreshRequest) returns (auth.RefreshResponse);
     */
    refresh(input: RefreshRequest, options?: RpcOptions): UnaryCall<RefreshRequest, RefreshResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<RefreshRequest, RefreshResponse>("unary", this._transport, method, opt, input);
    }
}
